name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
          
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Create binary archive
        run: |
          cd target/x86_64-unknown-linux-gnu/release
          tar czf url-to-md-linux-x86_64.tar.gz url-to-md
          
      - name: Upload Linux binary
        uses: actions/upload-artifact@v4
        with:
          name: url-to-md-linux-x86_64
          path: target/x86_64-unknown-linux-gnu/release/url-to-md-linux-x86_64.tar.gz

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin
          
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target x86_64-apple-darwin

      - name: Create binary archive
        run: |
          cd target/x86_64-apple-darwin/release
          tar czf url-to-md-macos-x86_64.tar.gz url-to-md
          
      - name: Upload macOS binary
        uses: actions/upload-artifact@v4
        with:
          name: url-to-md-macos-x86_64
          path: target/x86_64-apple-darwin/release/url-to-md-macos-x86_64.tar.gz

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
          
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Create binary archive
        run: |
          cd target/x86_64-pc-windows-msvc/release
          Compress-Archive -Path url-to-md.exe -DestinationPath url-to-md-windows-x86_64.zip
          
      - name: Upload Windows binary
        uses: actions/upload-artifact@v4
        with:
          name: url-to-md-windows-x86_64
          path: target/x86_64-pc-windows-msvc/release/url-to-md-windows-x86_64.zip

  release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Debug token availability
        run: |
          if [ -z "${{ secrets.PAT_TOKEN }}" ]; then
            echo "❌ PAT_TOKEN secret is not set!"
            echo "Please add your Personal Access Token as a repository secret named 'PAT_TOKEN'"
            exit 1
          else
            echo "✅ PAT_TOKEN secret is available"
          fi
        
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            url-to-md-linux-x86_64/url-to-md-linux-x86_64.tar.gz
            url-to-md-macos-x86_64/url-to-md-macos-x86_64.tar.gz
            url-to-md-windows-x86_64/url-to-md-windows-x86_64.zip
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || github.token }}